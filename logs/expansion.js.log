[
  { kind:     "number", startLine:    1, endLine:    2, path: "test.cpp", text: "\n" },
  { kind:     "string", startLine:    2, endLine:    2, path: "test.cpp", text: "// #include \"math.h\"" },
  { kind:     "number", startLine:    2, endLine:    4, path: "test.cpp", text: "\n\n" },
  { kind:    "comment", startLine:    4, endLine:    4, path: "test.cpp", text: "int" },
  { kind:     "number", startLine:    4, endLine:    4, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    4, endLine:    4, path: "test.cpp", text: "main" },
  { kind:      "other", startLine:    4, endLine:    4, path: "test.cpp", text: "(" },
  { kind:      "other", startLine:    4, endLine:    4, path: "test.cpp", text: ")" },
  { kind:     "number", startLine:    4, endLine:    4, path: "test.cpp", text: " " },
  { kind:      "other", startLine:    4, endLine:    4, path: "test.cpp", text: "{" },
  { kind:     "number", startLine:    4, endLine:    5, path: "test.cpp", text: "\n    " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "double" },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "a" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: "," },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "b" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: "," },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "c" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: "," },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "discriminant" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: "," },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "root1" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: "," },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "root2" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: "," },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "realPart" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: "," },
  { kind:     "number", startLine:    5, endLine:    5, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:    5, endLine:    5, path: "test.cpp", text: "imagPart" },
  { kind:      "other", startLine:    5, endLine:    5, path: "test.cpp", text: ";" },
  { kind:     "number", startLine:    5, endLine:    6, path: "test.cpp", text: "\n    " },
  { kind:    "comment", startLine:    6, endLine:    6, path: "test.cpp", text: "printf" },
  { kind:      "other", startLine:    6, endLine:    6, path: "test.cpp", text: "(" },
  { kind: "identifier", startLine:    6, endLine:   28, path: "test.cpp", text: "\"Enter coefficients a, b and c: \");\n    scanf(\"%lf %lf %lf\", &a, &b, &c);\n\n    discriminant = b * b - 4 * a * c;\n\n    // condition for real and different roots\n    if (discriminant > 0) {\n        root1 = (-b + sqrt(discriminant)) / (2 * a);\n        root2 = (-b - sqrt(discriminant)) / (2 * a);\n        printf(\"root1 = %.2lf and root2 = %.2lf\", root1, root2);\n    }\n\n    // condition for real and equal roots\n    else if (discriminant == 0) {\n        root1 = root2 = -b / (2 * a);\n        printf(\"root1 = root2 = %.2lf;\", root1);\n    }\n\n    // if roots are not real\n    else {\n        realPart = -b / (2 * a);\n        imagPart = sqrt(-discriminant) / (2 * a);\n        printf(\"root1 = %.2lf+%.2lfi and root2 = %.2f-%.2fi\"" },
  { kind:      "other", startLine:   28, endLine:   28, path: "test.cpp", text: "," },
  { kind:     "number", startLine:   28, endLine:   28, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:   28, endLine:   28, path: "test.cpp", text: "realPart" },
  { kind:      "other", startLine:   28, endLine:   28, path: "test.cpp", text: "," },
  { kind:     "number", startLine:   28, endLine:   28, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:   28, endLine:   28, path: "test.cpp", text: "imagPart" },
  { kind:      "other", startLine:   28, endLine:   28, path: "test.cpp", text: "," },
  { kind:     "number", startLine:   28, endLine:   28, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:   28, endLine:   28, path: "test.cpp", text: "realPart" },
  { kind:      "other", startLine:   28, endLine:   28, path: "test.cpp", text: "," },
  { kind:     "number", startLine:   28, endLine:   28, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:   28, endLine:   28, path: "test.cpp", text: "imagPart" },
  { kind:      "other", startLine:   28, endLine:   28, path: "test.cpp", text: ")" },
  { kind:      "other", startLine:   28, endLine:   28, path: "test.cpp", text: ";" },
  { kind:     "number", startLine:   28, endLine:   29, path: "test.cpp", text: "\n    " },
  { kind:      "other", startLine:   29, endLine:   29, path: "test.cpp", text: "}" },
  { kind:     "number", startLine:   29, endLine:   31, path: "test.cpp", text: "\n\n    " },
  { kind:    "comment", startLine:   31, endLine:   31, path: "test.cpp", text: "return" },
  { kind:     "number", startLine:   31, endLine:   31, path: "test.cpp", text: " " },
  { kind:    "comment", startLine:   31, endLine:   31, path: "test.cpp", text: "0" },
  { kind:      "other", startLine:   31, endLine:   31, path: "test.cpp", text: ";" },
  { kind:     "number", startLine:   31, endLine:   32, path: "test.cpp", text: "\n" },
  { kind:      "other", startLine:   32, endLine:   32, path: "test.cpp", text: "}" },
  { kind:     "number", startLine:   32, endLine:   33, path: "test.cpp", text: " \n" }
]
